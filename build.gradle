plugins {
  id "org.springframework.boot" version "1.5.22.RELEASE"
  id "org.jdrupes.mdoclet" version "1.0.10"
  id "com.github.ManifestClasspath" version "0.1.0-RELEASE"  
  id "com.bmuschko.docker-remote-api" version "6.6.1"
}

String propValue(String propName, String defValue) {
    (project.hasProperty(propName) && project.getProperty(propName)) ? project.getProperty(propName) : defValue
}

version = propValue("ci_version","master");
group = "com.softwareplumbers.oss"

def SNAPSHOT_BUILDS = ["master"];

if (SNAPSHOT_BUILDS.contains(version)) { version = version + "-SNAPSHOT" };

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

import com.bmuschko.gradle.docker.tasks.image.*

springBoot {
    // spring only scans built classes so need to specify the application name
    mainClass = 'com.softwareplumbers.monolith.rest.server.Application'
}

def defaultEnvironment = [
    'DOCTANE_KEYSTORE_PASSWORD': propValue("keystorePassword", "changeme"),
    'DOCTANE_INSTALLATION_ROOT': propValue("installRoot", "/var/tmp/doctane"),
    'DOCTANE_FEED_DATABASE_URL': propValue("feedDatabaseUrl", "jdbc:h2:file://var/tmp/doctane/feeds"),
    'DOCTANE_FEED_DATABASE_USER': propValue("feedDatabaseUser", "sa"),
    'DOCTANE_FEED_DATABASE_PASSWORD': propValue("feedDatabasePassword", "password"),
    'DOCTANE_FEED_DATABASE_CREATE_OPTION': propValue("feedDatabaseCreateOption", "RECREATE"),
    'DOCTANE_DMS_DATABASE_URL': propValue("dmsDatabaseUrl", "jdbc:h2:file://var/tmp/doctane/dms"),
    'DOCTANE_DMS_DATABASE_USER': propValue("dmsDatabaseUser", "sa"),
    'DOCTANE_DMS_DATABASE_PASSWORD': propValue("dmsDatabasePassword", "password"),
    'DOCTANE_DMS_DATABASE_CREATE_OPTION': propValue("dmsDatabaseCreateOption", "RECREATE"),
    'DOCTANE_ACS_URL': propValue("assertionConsumerService","http://localhost:8080/auth/test/saml"),
    'SPRING_PROFILES_ACTIVE': propValue("springProfile", "test")
]

configurations {
    sqlService
    testCompile.extendsFrom(sqlService)
    bootClasspath.extendsFrom(runtime, sqlService)
}

bootRun {
    systemProperties = System.properties
    environment = defaultEnvironment
    systemProperty "logging.config", "classpath:config/logback-spring.xml"
    classpath = sourceSets.test.runtimeClasspath
}

test {
    systemProperties = System.properties
    environment = defaultEnvironment
    systemProperty "spring.datasource.hikari.maximum-pool-size", 20
	testLogging {
        events "passed", "skipped", "failed"
    }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

task cleanDockerBuildContext(type: Delete) {
    delete "$buildDir/docker"
}

task prepareDockerBuildContext(type: Copy, dependsOn: cleanDockerBuildContext) {
    from 'src/main/docker'
    from(war.archiveFile) {
        into 'webapps' 
        rename { whatever -> 'doctane-service.war' }
    }
    into "$buildDir/docker"  
}

task buildDockerImage(type: DockerBuildImage, dependsOn: prepareDockerBuildContext) {
    inputDir = prepareDockerBuildContext.destinationDir
    images.add('softwareplumbers/doctane-api-tc9:latest')
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

task bootJar1(type: Jar, dependsOn: classes) {
  classifier 'standalone'
  from sourceSets.main.output
}

bootRepackage  {
	enabled=false
}

task repackageTask1(type: BootRepackage, dependsOn: bootJar1) {
    classifier='standalone'
    withJarTask='bootJar1'
    customConfiguration = 'bootClasspath'
}

jar {
	enabled = true
	// exclude services.xml from the library (because when we include this as a library we will specify our own services.xml)
	exclude("services.xml","application.properties","logback-spring.xml")
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allSource
}

task testsJar(type: Jar, dependsOn: classes) {
    classifier 'tests'
    from sourceSets.test.output
}

task showConfigurations {
    configurations.each { println it.name }
}

assemble {
	dependsOn repackageTask1
}

artifacts {
    archives sourcesJar 
    archives bootJar1
    archives testsJar
    archives javadocJar
    archives jar
}

repositories {
    maven { url propValue("proxyMavenCentral", "https://repo.maven.apache.org/maven2/") }
    maven { url 'https://nexus.softwareplumbers.com/repository/maven-oss' }
    maven { url 'https://nexus.softwareplumbers.com/repository/maven-oss-snapshot' }
}

uploadArchives {
  dependsOn bootRepackage
  repositories {
    mavenDeployer {
      repository(url: "https://nexus.softwareplumbers.com/repository/maven-oss") {
      	authentication(userName: propValue("mavenUploadUser",""), password: propValue("mavenUploadPassword",""))
      }
      snapshotRepository(url: "https://nexus.softwareplumbers.com/repository/maven-oss-snapshot") {
      	authentication(userName: propValue("mavenUploadUser",""), password: propValue("mavenUploadPassword",""))
      }
      pom.groupId='com.softwareplumbers.oss'
    }
  }
}

docker {
    registryCredentials {
        url = 'https://docker-repositories.softwareplumbers.com:443/v1/'
        username = 'gitlab-runner-softwareplumbers'
        password = 'sycophantic_elephant'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencyManagement { 
     dependencies {
          dependencySet(group:'org.slf4j', version: '1.7.31-SNAPSHOT') {
               entry 'slf4j-api'
               entry 'slf4j-ext'
               entry 'jul-to-slf4j'
          }        
     }
}

war {
    classpath configurations.sqlService
    classifier 'web'
}

configurations.all {
    // Check for updates to dependencies marked 'changing' every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    exclude group: "commons-logging", module: "commons-logging"
}

dependencies { 
    compile("org.springframework.boot:spring-boot-starter-jersey")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.springframework.boot:spring-boot-starter-logging")
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-processing', version: '2.25.1'
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '2.25.1'
    compile group: 'com.softwareplumbers.oss', name:'rest-server-dms', version: '0.9.46'
    compile group: 'com.softwareplumbers.oss', name:'rest-server-core', version: '0.5.12'
    compile group: 'com.softwareplumbers.oss', name:'rest-server-feeds', version: '0.0.18'
    compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.31-SNAPSHOT'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.31-SNAPSHOT'
    runtime group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.10.5'
    runtime group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.10.5'
    runtime group: 'org.glassfish', name: 'javax.json', version: '1.1.2'

    sqlService group: 'org.springframework.boot', name:'spring-boot-starter-jdbc'
    sqlService group: 'com.h2database', name: 'h2', version: '1.4.200'
    sqlService group: 'com.softwareplumbers.oss', name:'dms-service-sql', version: '0.9.27'
    sqlService group: 'com.softwareplumbers.oss', name:'feed-service-sql', version: '0.0.29'
    sqlService group: 'com.softwareplumbers.oss', name:'transformer-service-swift', version: '0.0.2'
    
    testCompile group: 'org.springframework.boot', name:'spring-boot-starter-test'
    testCompile group: 'com.softwareplumbers.oss', name:'dms-interface-core', version: '0.9.31', classifier: 'tests'
    testCompile group: 'com.softwareplumbers.oss', name:'feed-interface-core', version: '0.0.31', classifier: 'tests'
    testCompile group: 'com.softwareplumbers.oss', name:'dms-client-spring', version: '0.9.15'
    testCompile group: 'com.softwareplumbers.oss', name:'feed-client-spring', version: '0.0.12'
}
