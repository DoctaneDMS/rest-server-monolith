<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
 	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd" xmlns:aop="http://www.springframework.org/schema/aop">
    
    <context:annotation-config />

    <import resource="classpath:com/softwareplumbers/dms/service/sql/h2db.xml" />
    <import resource="classpath:com/softwareplumbers/dms/service/sql/mysqldb.xml" />
    <import resource="classpath:com/softwareplumbers/dms/service/sql/entities.xml" />
    <import resource="classpath:com/softwareplumbers/feed/service/sql/h2db.xml" />
    <import resource="classpath:com/softwareplumbers/feed/service/sql/mysqldb.xml" />
    <import resource="classpath:com/softwareplumbers/feed/service/sql/oradb.xml" />
    <import resource="classpath:com/softwareplumbers/feed/service/sql/entities.xml" />
    
    <bean id="ResourcePath" class="com.softwareplumbers.common.resourcepath.ResourcePath">
        <property name="locations">
            <array>
                <value>$spring.config.location</value>
                <value>classpath:/config</value>
            </array>
        </property>
    </bean>    
    
    <bean id="K8SEnvironment" class="com.softwareplumbers.common.k8senv.K8SEnvironment">
        <property name="secretsPathParts">
            <array>
                <value>#{systemEnvironment['DOCTANE_INSTALLATION_ROOT']}</value>
                <value>secrets</value>
            </array>            
        </property> 
    </bean>   

    <bean id="FeedDatabaseConfigFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
        <property name="serviceLocatorInterface" value="com.softwareplumbers.common.sql.DatabaseConfigFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="MYSQL">mysql.feed.config</prop>
                <prop key="ORACLE">oracle.feed.config</prop>
                <prop key="H2">h2.feed.config</prop>
            </props>
        </property>
    </bean>    
    
    <bean id="DmsDatabaseConfigFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
        <property name="serviceLocatorInterface" value="com.softwareplumbers.common.sql.DatabaseConfigFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="MYSQL">mysql.dms.config</prop>
                <prop key="H2">h2.dms.config</prop>
            </props>
        </property>
    </bean>       
    
    <!--- configure filestore -->
    <bean id="filestore" class="com.softwareplumbers.dms.service.sql.LocalFilesystem">
        <property name="PathParts">
            <array>
                <value>#{systemEnvironment['DOCTANE_INSTALLATION_ROOT']}</value>
                <value>documents</value>
            </array>
        </property>
    </bean>
    
    <bean id="dms.database" class="com.softwareplumbers.dms.service.sql.DocumentDatabase">
        <constructor-arg index="0" value="#{systemEnvironment['DOCTANE_DMS_DATABASE_URL']}"/>
        <constructor-arg index="1">
            <props>
                <prop key="username">#{@K8SEnvironment.secrets['DMS_SCHEMA_USERNAME']?:systemEnvironment['DOCTANE_DMS_DATABASE_USER']}</prop>
                <prop key="password">#{@K8SEnvironment.secrets['DMS_SCHEMA_PASSWORD']?:systemEnvironment['DOCTANE_DMS_DATABASE_PASSWORD']}</prop>
            </props>
        </constructor-arg>
        <constructor-arg index="2" ref="DmsDatabaseConfigFactory"/>                
        <constructor-arg index="3" value="#{systemEnvironment['DOCTANE_DMS_DATABASE_CREATE_OPTION']}"/>
    </bean>
            
    <!--- configure base repository -->
    <bean id="base" class="com.softwareplumbers.dms.service.sql.SQLRepositoryService" scope="singleton">
        <constructor-arg ref="dms.database"/>
        <constructor-arg ref="filestore"/> 
    </bean>

    <!-- compose additional repository services, such as ZipFileHandler -->
    <bean id="dms.test" class="com.softwareplumbers.dms.rest.server.model.PartHandlerService" scope="singleton">
        <property name="baseRepository" ref="base"/>
        <property name="handlers">
            <array>
                <bean class="com.softwareplumbers.dms.rest.server.model.ZipFileHandler"/>
            </array>
        </property>
    </bean>
    
    <!-- set up transformation services -->
    <bean id="transformers" class="com.softwareplumbers.dms.rest.server.model.TransformerFactory" scope="singleton">
        <constructor-arg>
            <list>
                <bean class="com.softwareplumbers.dms.rest.server.model.TikaXMLTransformer"/>
            </list>
        </constructor-arg>
    </bean>    

    <!--- configure a feed service -->
    <bean id="feed.test" class="com.softwareplumbers.feed.service.sql.SQLFeedService" scope="singleton">
        <constructor-arg index="0" value="da7aa4a9-cb2d-4525-aa87-184f1ae1f642"/>
        <constructor-arg index="1">
            <bean class="com.softwareplumbers.feed.service.sql.MessageDatabase" scope="singleton">
                <constructor-arg index="0" value="#{systemEnvironment['DOCTANE_FEED_DATABASE_URL']}"/>
                <constructor-arg index="1">
                    <props>
                        <prop key="username">#{@K8SEnvironment.secrets['FEED_SCHEMA_USERNAME']?:systemEnvironment['DOCTANE_FEED_DATABASE_USER']}</prop>
                        <prop key="password">#{@K8SEnvironment.secrets['FEED_SCHEMA_PASSWORD']?:systemEnvironment['DOCTANE_FEED_DATABASE_PASSWORD']}</prop>
                    </props>
                </constructor-arg>
                <constructor-arg index="2" ref="FeedDatabaseConfigFactory"/>                
                <constructor-arg index="3" value="#{systemEnvironment['DOCTANE_FEED_DATABASE_CREATE_OPTION']}"/>
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="hostResolver" class="com.softwareplumbers.feed.rest.server.DummyResolver"/>  
    
    <bean id="cluster" class="com.softwareplumbers.feed.impl.FilesystemCluster">
        <constructor-arg index="0" type="int" value="4"/>
        <constructor-arg index="1">
            <array value-type="java.lang.String">
                <value>#{systemEnvironment['DOCTANE_INSTALLATION_ROOT']}</value>
                <value>cluster.json</value>
            </array>            
        </constructor-arg>
        <constructor-arg index="2" value="http://localhost:8080"/>
        <constructor-arg index="3" ref="hostResolver"/>
    </bean>      
                                          
    <bean id ="keymgr" class="com.softwareplumbers.keymanager.KeyManager" scope="singleton">
        <property name="locationParts">
            <array value-type="java.lang.String">
                <value>#{systemEnvironment['DOCTANE_INSTALLATION_ROOT']}</value>
                <value>pkix</value>
                <value>doctane.keystore</value>
            </array>
        </property>
        <property name="publishLocationParts">
            <array value-type="java.lang.String">
                <value>#{systemEnvironment['DOCTANE_INSTALLATION_ROOT']}</value>
                <value>pkix</value>
                <value>certs</value>
            </array>                
        </property>
        <property name="password" value="#{@K8SEnvironment.secrets['DOCTANE_KEYSTORE_PASSWORD']?:systemEnvironment['DOCTANE_KEYSTORE_PASSWORD']}"/>
        <property name="requiredSecretKeys" value="com.softwareplumbers.rest.server.core.SystemSecretKeys"/>
        <property name="requiredKeyPairs" value="com.softwareplumbers.rest.server.core.SystemKeyPairs"/>        
    </bean>

    
    <bean id="dummyValidation" class="com.softwareplumbers.rest.server.core.DummyRequestValidationService" scope="singleton">
        <constructor-arg index="0" value="test"/>
    </bean>
            
    <bean id="auth.dummy" class="com.softwareplumbers.rest.server.model.AuthenticationService" scope="singleton">
        <property name="RequestValidationService" ref="dummyValidation"/>
        <property name="SignonService">
            <bean class="com.softwareplumbers.rest.server.core.DummySignonService">
                <constructor-arg index="0" ref="dummyValidation"/>
            </bean>
        </property>
        <property name="SignedRequestValidationService" ref="signedRequestValidationService"/>
    </bean>
    
    <bean id="signedRequestValidationService" class="com.softwareplumbers.rest.server.model.SignedRequestValidationService" scope="singleton">
                <constructor-arg index="0" ref="keymgr"/>
    </bean>
    
    <bean id="softwarePlumbersSAMLServer" class="com.softwareplumbers.rest.server.model.SAMLProtocolHandlerService" scope="singleton"/>

    <bean id="cookieRequestValidationService" class="com.softwareplumbers.rest.server.core.CookieRequestValidationService">
        <constructor-arg index="0" ref="keymgr"/>
        <constructor-arg index="1" value="test"/>
    </bean>
                
    <bean id="auth.test" class="com.softwareplumbers.rest.server.model.AuthenticationService" scope="singleton">
        <property name="RequestValidationService" ref="cookieRequestValidationService"/>
        <property name="SignedRequestValidationService" ref="signedRequestValidationService"/>
        <property name="SignonService">
            <bean class="com.softwareplumbers.rest.server.core.SAMLSignonService">
                <property name="SAMLProtocolHandlerService" ref="softwarePlumbersSAMLServer"/>
                <property name="assertionConsumerURI" value="http://localhost:8080/auth/test/saml"/>
                <property name="issuerId" value="doctane-api-saml2"/>
            </bean>
        </property>
        <property name="SAMLResponseHandlerService" ref="softwarePlumbersSAMLServer"/>
    </bean>

    <bean id="authz.public" class="com.softwareplumbers.authz.impl.PublicAuthorizationService" scope="singleton"/>

    <bean id="RepositoryServiceFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
        <property name="serviceLocatorInterface" value="com.softwareplumbers.dms.rest.server.core.RepositoryServiceFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="test">dms.test</prop>
                <prop key="dummy">dms.test</prop>
            </props>
        </property>
    </bean>
   
    <bean id="FeedServiceFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
        <property name="serviceLocatorInterface" value="com.softwareplumbers.feed.rest.server.FeedServiceFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="test">feed.test</prop>
                <prop key="dummy">feed.test</prop>
            </props>
        </property>
    </bean>

    <bean id="AuthenticationServiceFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
    	<property name="serviceLocatorInterface" value="com.softwareplumbers.rest.server.core.AuthenticationServiceFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="test">auth.test</prop>
                <prop key="dummy">auth.dummy</prop>
            </props>
        </property>
    </bean>
    
    <bean primary="true" id="workspace.AuthorizationServiceFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
        <qualifier value="workspaceAuthorization"/>
        <property name="serviceLocatorInterface" value="com.softwareplumbers.authz.AuthorizationServiceFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="test">authz.public</prop>
                <prop key="dummy">authz.public</prop>
            </props>
        </property>
    </bean>

    <bean id="document.AuthorizationServiceFactory"
            class="org.springframework.beans.factory.config.ServiceLocatorFactoryBean">
        <qualifier value="documentAuthorization"/>
        <property name="serviceLocatorInterface" value="com.softwareplumbers.authz.AuthorizationServiceFactory"/>
        <property name="serviceMappings">
            <props>
                <prop key="test">authz.public</prop>
                <prop key="dummy">authz.public</prop>
            </props>
        </property>
    </bean>

    <bean id="AuthorizationServiceFactory" class="com.softwareplumbers.dms.rest.server.model.RepositoryAuthorizationServiceFactory" />

    <bean id="testManager" class="com.softwareplumbers.feed.service.sql.SQLFeedServiceMBean">
        <constructor-arg index="0" ref="feed.test" />
    </bean>
    
    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
        <property name="beans">
            <map>
                <entry key="bean:name=feed.service.test" value-ref="testManager"/>
            </map>
        </property>
        <!---
        <property name="server" ref="mbeanServer"/>
        -->
    </bean>
                  
</beans>
